// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: chat.proto

package chat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatChan int32

const (
	ChatChan_None          ChatChan = 0  // 空
	ChatChan_comprehensive ChatChan = 1  // 综合聊天
	ChatChan_World         ChatChan = 2  // 全服聊天
	ChatChan_Zone          ChatChan = 3  // 本区聊天
	ChatChan_Local         ChatChan = 4  // 本服聊天
	ChatChan_Cross         ChatChan = 5  // 跨服聊天
	ChatChan_Private       ChatChan = 8  // 私有聊天
	ChatChan_System        ChatChan = 9  // 系统聊天
	ChatChan_Scene         ChatChan = 10 // 附近聊天
)

// Enum value maps for ChatChan.
var (
	ChatChan_name = map[int32]string{
		0:  "None",
		1:  "comprehensive",
		2:  "World",
		3:  "Zone",
		4:  "Local",
		5:  "Cross",
		8:  "Private",
		9:  "System",
		10: "Scene",
	}
	ChatChan_value = map[string]int32{
		"None":          0,
		"comprehensive": 1,
		"World":         2,
		"Zone":          3,
		"Local":         4,
		"Cross":         5,
		"Private":       8,
		"System":        9,
		"Scene":         10,
	}
)

func (x ChatChan) Enum() *ChatChan {
	p := new(ChatChan)
	*p = x
	return p
}

func (x ChatChan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatChan) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[0].Descriptor()
}

func (ChatChan) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[0]
}

func (x ChatChan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatChan.Descriptor instead.
func (ChatChan) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

type PrivateChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content  string        `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	SendTime int64         `protobuf:"varint,2,opt,name=sendTime,proto3" json:"sendTime,omitempty"`
	Sender   *ChatBaseInfo `protobuf:"bytes,3,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Receiver *ChatBaseInfo `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	IsVoice  bool          `protobuf:"varint,5,opt,name=isVoice,proto3" json:"isVoice,omitempty"`
	Degree   int32         `protobuf:"varint,6,opt,name=degree,proto3" json:"degree,omitempty"` // 好友度
}

func (x *PrivateChatMsg) Reset() {
	*x = PrivateChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateChatMsg) ProtoMessage() {}

func (x *PrivateChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateChatMsg.ProtoReflect.Descriptor instead.
func (*PrivateChatMsg) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *PrivateChatMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PrivateChatMsg) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *PrivateChatMsg) GetSender() *ChatBaseInfo {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *PrivateChatMsg) GetReceiver() *ChatBaseInfo {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *PrivateChatMsg) GetIsVoice() bool {
	if x != nil {
		return x.IsVoice
	}
	return false
}

func (x *PrivateChatMsg) GetDegree() int32 {
	if x != nil {
		return x.Degree
	}
	return 0
}

type ChatBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BubbleFrame uint32 `protobuf:"varint,1,opt,name=bubbleFrame,proto3" json:"bubbleFrame,omitempty"` // 气泡框  s 表示发送者
	Head        uint32 `protobuf:"varint,2,opt,name=head,proto3" json:"head,omitempty"`               // 头像
	HeadFrame   uint32 `protobuf:"varint,3,opt,name=headFrame,proto3" json:"headFrame,omitempty"`     // 头像框
	NickName    string `protobuf:"bytes,4,opt,name=nickName,proto3" json:"nickName,omitempty"`        // 昵称
	Id          uint64 `protobuf:"varint,5,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *ChatBaseInfo) Reset() {
	*x = ChatBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBaseInfo) ProtoMessage() {}

func (x *ChatBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBaseInfo.ProtoReflect.Descriptor instead.
func (*ChatBaseInfo) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *ChatBaseInfo) GetBubbleFrame() uint32 {
	if x != nil {
		return x.BubbleFrame
	}
	return 0
}

func (x *ChatBaseInfo) GetHead() uint32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *ChatBaseInfo) GetHeadFrame() uint32 {
	if x != nil {
		return x.HeadFrame
	}
	return 0
}

func (x *ChatBaseInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *ChatBaseInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ChatStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`             //
	UseNum   uint32 `protobuf:"varint,2,opt,name=UseNum,proto3" json:"UseNum,omitempty"`     // 当天使用次数
	TimeNum  uint32 `protobuf:"varint,3,opt,name=TimeNum,proto3" json:"TimeNum,omitempty"`   // 单位时间次数
	Speaker  uint32 `protobuf:"varint,4,opt,name=Speaker,proto3" json:"Speaker,omitempty"`   // 使用喇叭次数
	LastTime int64  `protobuf:"varint,5,opt,name=LastTime,proto3" json:"LastTime,omitempty"` // 最后一次发送时间
	PriNum   uint32 `protobuf:"varint,6,opt,name=PriNum,proto3" json:"PriNum,omitempty"`     // 私聊次数
}

func (x *ChatStatistics) Reset() {
	*x = ChatStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatStatistics) ProtoMessage() {}

func (x *ChatStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatStatistics.ProtoReflect.Descriptor instead.
func (*ChatStatistics) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *ChatStatistics) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatStatistics) GetUseNum() uint32 {
	if x != nil {
		return x.UseNum
	}
	return 0
}

func (x *ChatStatistics) GetTimeNum() uint32 {
	if x != nil {
		return x.TimeNum
	}
	return 0
}

func (x *ChatStatistics) GetSpeaker() uint32 {
	if x != nil {
		return x.Speaker
	}
	return 0
}

func (x *ChatStatistics) GetLastTime() int64 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

func (x *ChatStatistics) GetPriNum() uint32 {
	if x != nil {
		return x.PriNum
	}
	return 0
}

type CSCrossSrvChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	IsVoice      bool   `protobuf:"varint,2,opt,name=isVoice,proto3" json:"isVoice,omitempty"`
	MessageType  uint32 `protobuf:"varint,3,opt,name=messageType,proto3" json:"messageType,omitempty"`
	IsUseTrumpet bool   `protobuf:"varint,4,opt,name=isUseTrumpet,proto3" json:"isUseTrumpet,omitempty"`
}

func (x *CSCrossSrvChatMsg) Reset() {
	*x = CSCrossSrvChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCrossSrvChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCrossSrvChatMsg) ProtoMessage() {}

func (x *CSCrossSrvChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCrossSrvChatMsg.ProtoReflect.Descriptor instead.
func (*CSCrossSrvChatMsg) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *CSCrossSrvChatMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CSCrossSrvChatMsg) GetIsVoice() bool {
	if x != nil {
		return x.IsVoice
	}
	return false
}

func (x *CSCrossSrvChatMsg) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *CSCrossSrvChatMsg) GetIsUseTrumpet() bool {
	if x != nil {
		return x.IsUseTrumpet
	}
	return false
}

type SCCrossSrvChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      string        `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"` // 聊天内容  (脏词过滤后的)
	Sender       *ChatBaseInfo `protobuf:"bytes,2,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Receiver     *ChatBaseInfo `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	IsVoice      bool          `protobuf:"varint,4,opt,name=isVoice,proto3" json:"isVoice,omitempty"`            // 是否语音聊天
	SendTime     int64         `protobuf:"varint,5,opt,name=SendTime,proto3" json:"SendTime,omitempty"`          // 发送时间
	Degree       int32         `protobuf:"varint,6,opt,name=degree,proto3" json:"degree,omitempty"`              // 好友度
	ZoneID       int32         `protobuf:"varint,7,opt,name=zoneID,proto3" json:"zoneID,omitempty"`              // 区服ID
	MessageType  uint32        `protobuf:"varint,8,opt,name=messageType,proto3" json:"messageType,omitempty"`    // 消息类型： 0 本区消息  1 跨区消息（世界聊天）  2 跨服消息（指定服范围）
	ProcIndex    uint32        `protobuf:"varint,9,opt,name=procIndex,proto3" json:"procIndex,omitempty"`        // 发送消息的玩家所在的 服进程id
	RangeOfSrv   uint32        `protobuf:"varint,10,opt,name=rangeOfSrv,proto3" json:"rangeOfSrv,omitempty"`     // 指定的跨服区间， 配表指定的。  rangeOfSrv = 5 表示  procIndex 为 1~5 的玩家 发送的跨服消息，只会广播给 所有的 1~5 服玩家
	IsUseTrumpet bool          `protobuf:"varint,11,opt,name=isUseTrumpet,proto3" json:"isUseTrumpet,omitempty"` // 是否使用喇叭
	OldContent   string        `protobuf:"bytes,12,opt,name=oldContent,proto3" json:"oldContent,omitempty"`      // 聊天内容  (脏词过滤前的)
}

func (x *SCCrossSrvChatMsg) Reset() {
	*x = SCCrossSrvChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCrossSrvChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCrossSrvChatMsg) ProtoMessage() {}

func (x *SCCrossSrvChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCrossSrvChatMsg.ProtoReflect.Descriptor instead.
func (*SCCrossSrvChatMsg) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *SCCrossSrvChatMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SCCrossSrvChatMsg) GetSender() *ChatBaseInfo {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *SCCrossSrvChatMsg) GetReceiver() *ChatBaseInfo {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *SCCrossSrvChatMsg) GetIsVoice() bool {
	if x != nil {
		return x.IsVoice
	}
	return false
}

func (x *SCCrossSrvChatMsg) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *SCCrossSrvChatMsg) GetDegree() int32 {
	if x != nil {
		return x.Degree
	}
	return 0
}

func (x *SCCrossSrvChatMsg) GetZoneID() int32 {
	if x != nil {
		return x.ZoneID
	}
	return 0
}

func (x *SCCrossSrvChatMsg) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *SCCrossSrvChatMsg) GetProcIndex() uint32 {
	if x != nil {
		return x.ProcIndex
	}
	return 0
}

func (x *SCCrossSrvChatMsg) GetRangeOfSrv() uint32 {
	if x != nil {
		return x.RangeOfSrv
	}
	return 0
}

func (x *SCCrossSrvChatMsg) GetIsUseTrumpet() bool {
	if x != nil {
		return x.IsUseTrumpet
	}
	return false
}

func (x *SCCrossSrvChatMsg) GetOldContent() string {
	if x != nil {
		return x.OldContent
	}
	return ""
}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x4e, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x72, 0x69, 0x4e, 0x75, 0x6d, 0x22, 0x8d, 0x01,
	0x0a, 0x11, 0x43, 0x53, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x72, 0x76, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x55,
	0x73, 0x65, 0x54, 0x72, 0x75, 0x6d, 0x70, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x54, 0x72, 0x75, 0x6d, 0x70, 0x65, 0x74, 0x22, 0x93, 0x03,
	0x0a, 0x11, 0x53, 0x43, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x72, 0x76, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x53, 0x72, 0x76, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x53, 0x72, 0x76, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x54, 0x72, 0x75, 0x6d, 0x70, 0x65, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x54, 0x72, 0x75, 0x6d,
	0x70, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2a, 0x76, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x09,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x10, 0x0a, 0x42, 0x33, 0x5a, 0x31, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x75, 0x68, 0x61, 0x6f,
	0x30, 0x30, 0x2f, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x63, 0x68, 0x61, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chat_proto_goTypes = []interface{}{
	(ChatChan)(0),             // 0: chat.ChatChan
	(*PrivateChatMsg)(nil),    // 1: chat.PrivateChatMsg
	(*ChatBaseInfo)(nil),      // 2: chat.chatBaseInfo
	(*ChatStatistics)(nil),    // 3: chat.chatStatistics
	(*CSCrossSrvChatMsg)(nil), // 4: chat.CSCrossSrvChatMsg
	(*SCCrossSrvChatMsg)(nil), // 5: chat.SCCrossSrvChatMsg
}
var file_chat_proto_depIdxs = []int32{
	2, // 0: chat.PrivateChatMsg.Sender:type_name -> chat.chatBaseInfo
	2, // 1: chat.PrivateChatMsg.receiver:type_name -> chat.chatBaseInfo
	2, // 2: chat.SCCrossSrvChatMsg.Sender:type_name -> chat.chatBaseInfo
	2, // 3: chat.SCCrossSrvChatMsg.receiver:type_name -> chat.chatBaseInfo
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCrossSrvChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCrossSrvChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		EnumInfos:         file_chat_proto_enumTypes,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
