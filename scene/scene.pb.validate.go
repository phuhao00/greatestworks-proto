// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: scene.proto

package scene

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on SceneHeartbeat with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SceneHeartbeat) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Time

	return nil
}

// SceneHeartbeatValidationError is the validation error returned by
// SceneHeartbeat.Validate if the designated constraints aren't met.
type SceneHeartbeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SceneHeartbeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SceneHeartbeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SceneHeartbeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SceneHeartbeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SceneHeartbeatValidationError) ErrorName() string { return "SceneHeartbeatValidationError" }

// Error satisfies the builtin error interface
func (e SceneHeartbeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSceneHeartbeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SceneHeartbeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SceneHeartbeatValidationError{}

// Validate checks the field values on CSCanJoinScene with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CSCanJoinScene) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SceneId

	// no validation rules for PlayerId

	return nil
}

// CSCanJoinSceneValidationError is the validation error returned by
// CSCanJoinScene.Validate if the designated constraints aren't met.
type CSCanJoinSceneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSCanJoinSceneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSCanJoinSceneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSCanJoinSceneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSCanJoinSceneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSCanJoinSceneValidationError) ErrorName() string { return "CSCanJoinSceneValidationError" }

// Error satisfies the builtin error interface
func (e CSCanJoinSceneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSCanJoinScene.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSCanJoinSceneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSCanJoinSceneValidationError{}

// Validate checks the field values on SCCanJoinScene with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SCCanJoinScene) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsOk

	// no validation rules for SceneId

	// no validation rules for PlayerId

	return nil
}

// SCCanJoinSceneValidationError is the validation error returned by
// SCCanJoinScene.Validate if the designated constraints aren't met.
type SCCanJoinSceneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCCanJoinSceneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCCanJoinSceneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCCanJoinSceneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCCanJoinSceneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCCanJoinSceneValidationError) ErrorName() string { return "SCCanJoinSceneValidationError" }

// Error satisfies the builtin error interface
func (e SCCanJoinSceneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCCanJoinScene.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCCanJoinSceneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCCanJoinSceneValidationError{}

// Validate checks the field values on CSJoinScene with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CSJoinScene) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SceneId

	// no validation rules for BirthId

	// no validation rules for PlayerId

	// no validation rules for Passwd

	// no validation rules for IsView

	// no validation rules for JumpType

	// no validation rules for Param

	// no validation rules for Portal

	return nil
}

// CSJoinSceneValidationError is the validation error returned by
// CSJoinScene.Validate if the designated constraints aren't met.
type CSJoinSceneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSJoinSceneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSJoinSceneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSJoinSceneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSJoinSceneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSJoinSceneValidationError) ErrorName() string { return "CSJoinSceneValidationError" }

// Error satisfies the builtin error interface
func (e CSJoinSceneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSJoinScene.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSJoinSceneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSJoinSceneValidationError{}

// Validate checks the field values on SCJoinScene with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SCJoinScene) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SceneId

	if v, ok := interface{}(m.GetPlayerInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCJoinSceneValidationError{
				field:  "PlayerInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPlayers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SCJoinSceneValidationError{
					field:  fmt.Sprintf("Players[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SCJoinSceneValidationError is the validation error returned by
// SCJoinScene.Validate if the designated constraints aren't met.
type SCJoinSceneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCJoinSceneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCJoinSceneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCJoinSceneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCJoinSceneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCJoinSceneValidationError) ErrorName() string { return "SCJoinSceneValidationError" }

// Error satisfies the builtin error interface
func (e SCJoinSceneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCJoinScene.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCJoinSceneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCJoinSceneValidationError{}

// Validate checks the field values on SCJoinSceneError with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SCJoinSceneError) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrCode

	return nil
}

// SCJoinSceneErrorValidationError is the validation error returned by
// SCJoinSceneError.Validate if the designated constraints aren't met.
type SCJoinSceneErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCJoinSceneErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCJoinSceneErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCJoinSceneErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCJoinSceneErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCJoinSceneErrorValidationError) ErrorName() string { return "SCJoinSceneErrorValidationError" }

// Error satisfies the builtin error interface
func (e SCJoinSceneErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCJoinSceneError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCJoinSceneErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCJoinSceneErrorValidationError{}

// Validate checks the field values on SCPlayerJoinScene with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SCPlayerJoinScene) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlayerInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCPlayerJoinSceneValidationError{
				field:  "PlayerInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SCPlayerJoinSceneValidationError is the validation error returned by
// SCPlayerJoinScene.Validate if the designated constraints aren't met.
type SCPlayerJoinSceneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCPlayerJoinSceneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCPlayerJoinSceneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCPlayerJoinSceneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCPlayerJoinSceneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCPlayerJoinSceneValidationError) ErrorName() string {
	return "SCPlayerJoinSceneValidationError"
}

// Error satisfies the builtin error interface
func (e SCPlayerJoinSceneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCPlayerJoinScene.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCPlayerJoinSceneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCPlayerJoinSceneValidationError{}

// Validate checks the field values on CSLeaveScene with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CSLeaveScene) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CSLeaveSceneValidationError is the validation error returned by
// CSLeaveScene.Validate if the designated constraints aren't met.
type CSLeaveSceneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSLeaveSceneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSLeaveSceneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSLeaveSceneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSLeaveSceneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSLeaveSceneValidationError) ErrorName() string { return "CSLeaveSceneValidationError" }

// Error satisfies the builtin error interface
func (e CSLeaveSceneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSLeaveScene.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSLeaveSceneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSLeaveSceneValidationError{}

// Validate checks the field values on SCLeaveScene with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SCLeaveScene) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Playerid

	return nil
}

// SCLeaveSceneValidationError is the validation error returned by
// SCLeaveScene.Validate if the designated constraints aren't met.
type SCLeaveSceneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCLeaveSceneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCLeaveSceneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCLeaveSceneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCLeaveSceneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCLeaveSceneValidationError) ErrorName() string { return "SCLeaveSceneValidationError" }

// Error satisfies the builtin error interface
func (e SCLeaveSceneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCLeaveScene.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCLeaveSceneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCLeaveSceneValidationError{}

// Validate checks the field values on SCPlayerEnterScreen with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SCPlayerEnterScreen) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPlayerInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCPlayerEnterScreenValidationError{
				field:  "PlayerInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SCPlayerEnterScreenValidationError is the validation error returned by
// SCPlayerEnterScreen.Validate if the designated constraints aren't met.
type SCPlayerEnterScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCPlayerEnterScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCPlayerEnterScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCPlayerEnterScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCPlayerEnterScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCPlayerEnterScreenValidationError) ErrorName() string {
	return "SCPlayerEnterScreenValidationError"
}

// Error satisfies the builtin error interface
func (e SCPlayerEnterScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCPlayerEnterScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCPlayerEnterScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCPlayerEnterScreenValidationError{}

// Validate checks the field values on SCPlayerLeaveScreen with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SCPlayerLeaveScreen) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PlayerId

	return nil
}

// SCPlayerLeaveScreenValidationError is the validation error returned by
// SCPlayerLeaveScreen.Validate if the designated constraints aren't met.
type SCPlayerLeaveScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCPlayerLeaveScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCPlayerLeaveScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCPlayerLeaveScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCPlayerLeaveScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCPlayerLeaveScreenValidationError) ErrorName() string {
	return "SCPlayerLeaveScreenValidationError"
}

// Error satisfies the builtin error interface
func (e SCPlayerLeaveScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCPlayerLeaveScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCPlayerLeaveScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCPlayerLeaveScreenValidationError{}

// Validate checks the field values on SCSyncUnitsInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SCSyncUnitsInfo) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUnits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SCSyncUnitsInfoValidationError{
					field:  fmt.Sprintf("Units[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SCSyncUnitsInfoValidationError is the validation error returned by
// SCSyncUnitsInfo.Validate if the designated constraints aren't met.
type SCSyncUnitsInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCSyncUnitsInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCSyncUnitsInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCSyncUnitsInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCSyncUnitsInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCSyncUnitsInfoValidationError) ErrorName() string { return "SCSyncUnitsInfoValidationError" }

// Error satisfies the builtin error interface
func (e SCSyncUnitsInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCSyncUnitsInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCSyncUnitsInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCSyncUnitsInfoValidationError{}

// Validate checks the field values on SCUnitEnterScreen with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SCUnitEnterScreen) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCUnitEnterScreenValidationError{
				field:  "Unit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SCUnitEnterScreenValidationError is the validation error returned by
// SCUnitEnterScreen.Validate if the designated constraints aren't met.
type SCUnitEnterScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCUnitEnterScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCUnitEnterScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCUnitEnterScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCUnitEnterScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCUnitEnterScreenValidationError) ErrorName() string {
	return "SCUnitEnterScreenValidationError"
}

// Error satisfies the builtin error interface
func (e SCUnitEnterScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCUnitEnterScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCUnitEnterScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCUnitEnterScreenValidationError{}

// Validate checks the field values on SCUnitLeaveScreen with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SCUnitLeaveScreen) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UnitId

	return nil
}

// SCUnitLeaveScreenValidationError is the validation error returned by
// SCUnitLeaveScreen.Validate if the designated constraints aren't met.
type SCUnitLeaveScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCUnitLeaveScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCUnitLeaveScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCUnitLeaveScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCUnitLeaveScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCUnitLeaveScreenValidationError) ErrorName() string {
	return "SCUnitLeaveScreenValidationError"
}

// Error satisfies the builtin error interface
func (e SCUnitLeaveScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCUnitLeaveScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCUnitLeaveScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCUnitLeaveScreenValidationError{}

// Validate checks the field values on SCUnitInfoUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SCUnitInfoUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCUnitInfoUpdateValidationError{
				field:  "Unit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SCUnitInfoUpdateValidationError is the validation error returned by
// SCUnitInfoUpdate.Validate if the designated constraints aren't met.
type SCUnitInfoUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCUnitInfoUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCUnitInfoUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCUnitInfoUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCUnitInfoUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCUnitInfoUpdateValidationError) ErrorName() string { return "SCUnitInfoUpdateValidationError" }

// Error satisfies the builtin error interface
func (e SCUnitInfoUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCUnitInfoUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCUnitInfoUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCUnitInfoUpdateValidationError{}
