// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sever_common.proto

package server_common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ActionData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ActionData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ActionState

	// no validation rules for ActionStartTime

	// no validation rules for Param

	return nil
}

// ActionDataValidationError is the validation error returned by
// ActionData.Validate if the designated constraints aren't met.
type ActionDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionDataValidationError) ErrorName() string { return "ActionDataValidationError" }

// Error satisfies the builtin error interface
func (e ActionDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionDataValidationError{}

// Validate checks the field values on PlayerBaseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PlayerBaseInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PlayerId

	// no validation rules for CharId

	// no validation rules for Name

	// no validation rules for Gold

	// no validation rules for PositionX

	// no validation rules for PositionY

	// no validation rules for PositionZ

	// no validation rules for Orientation

	// no validation rules for Frame

	// no validation rules for Head

	// no validation rules for HeadUrl

	// no validation rules for Model

	// no validation rules for BubbleFrame

	// no validation rules for Coin

	// no validation rules for VehicleID

	if v, ok := interface{}(m.GetActData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlayerBaseInfoValidationError{
				field:  "ActData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VipLevel

	// no validation rules for Exp

	// no validation rules for InteractObjID

	// no validation rules for InteractObjSeat

	// no validation rules for NameColor

	// no validation rules for BaseLevel

	// no validation rules for BaseExp

	return nil
}

// PlayerBaseInfoValidationError is the validation error returned by
// PlayerBaseInfo.Validate if the designated constraints aren't met.
type PlayerBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerBaseInfoValidationError) ErrorName() string { return "PlayerBaseInfoValidationError" }

// Error satisfies the builtin error interface
func (e PlayerBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerBaseInfoValidationError{}

// Validate checks the field values on Vec3 with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Vec3) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	return nil
}

// Vec3ValidationError is the validation error returned by Vec3.Validate if the
// designated constraints aren't met.
type Vec3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Vec3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Vec3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Vec3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Vec3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Vec3ValidationError) ErrorName() string { return "Vec3ValidationError" }

// Error satisfies the builtin error interface
func (e Vec3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVec3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Vec3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Vec3ValidationError{}

// Validate checks the field values on UnitInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UnitInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UnitId

	// no validation rules for TypeId

	// no validation rules for PosX

	// no validation rules for PosY

	// no validation rules for PosZ

	// no validation rules for RotateX

	// no validation rules for RotateY

	// no validation rules for RotateZ

	// no validation rules for CanBeCarried

	if v, ok := interface{}(m.GetActData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnitInfoValidationError{
				field:  "ActData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AttachID

	// no validation rules for AttacheBuildingID

	// no validation rules for BuildingSeat

	// no validation rules for SkinColor

	// no validation rules for Name

	// no validation rules for IsWork

	return nil
}

// UnitInfoValidationError is the validation error returned by
// UnitInfo.Validate if the designated constraints aren't met.
type UnitInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitInfoValidationError) ErrorName() string { return "UnitInfoValidationError" }

// Error satisfies the builtin error interface
func (e UnitInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnitInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitInfoValidationError{}

// Validate checks the field values on UnitActionData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnitActionData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ActType

	// no validation rules for ActName

	// no validation rules for ActStartTime

	// no validation rules for ParseType

	// no validation rules for Param

	// no validation rules for EmojiID

	return nil
}

// UnitActionDataValidationError is the validation error returned by
// UnitActionData.Validate if the designated constraints aren't met.
type UnitActionDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitActionDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitActionDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitActionDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitActionDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitActionDataValidationError) ErrorName() string { return "UnitActionDataValidationError" }

// Error satisfies the builtin error interface
func (e UnitActionDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnitActionData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitActionDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitActionDataValidationError{}

// Validate checks the field values on InteractiveObj with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *InteractiveObj) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for TypeId

	// no validation rules for PosX

	// no validation rules for PosY

	// no validation rules for PosZ

	// no validation rules for RotateX

	// no validation rules for RotateY

	// no validation rules for RotateZ

	// no validation rules for JumpScene

	// no validation rules for JumpBirth

	// no validation rules for LocalData

	// no validation rules for IsRes

	// no validation rules for InterType

	// no validation rules for SubPosX

	// no validation rules for SubPosY

	// no validation rules for SubPosZ

	// no validation rules for Count

	// no validation rules for LastTime

	// no validation rules for Status

	// no validation rules for AreaID

	// no validation rules for ZoomX

	// no validation rules for ZoomY

	// no validation rules for ZoomZ

	// no validation rules for TagID

	// no validation rules for Index

	// no validation rules for GroupID

	// no validation rules for Params

	// no validation rules for Owner

	return nil
}

// InteractiveObjValidationError is the validation error returned by
// InteractiveObj.Validate if the designated constraints aren't met.
type InteractiveObjValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractiveObjValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractiveObjValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractiveObjValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractiveObjValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractiveObjValidationError) ErrorName() string { return "InteractiveObjValidationError" }

// Error satisfies the builtin error interface
func (e InteractiveObjValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteractiveObj.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractiveObjValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractiveObjValidationError{}

// Validate checks the field values on LimitInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LimitInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cond

	// no validation rules for InReason

	// no validation rules for OutReason

	// no validation rules for ExpTime

	return nil
}

// LimitInfoValidationError is the validation error returned by
// LimitInfo.Validate if the designated constraints aren't met.
type LimitInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LimitInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LimitInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LimitInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LimitInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LimitInfoValidationError) ErrorName() string { return "LimitInfoValidationError" }

// Error satisfies the builtin error interface
func (e LimitInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLimitInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LimitInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LimitInfoValidationError{}
