// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gateway.proto

package gateway

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CSGatewayLogin with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CSGatewayLogin) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Userid

	// no validation rules for Token

	// no validation rules for PlatName

	// no validation rules for ZoneId

	return nil
}

// CSGatewayLoginValidationError is the validation error returned by
// CSGatewayLogin.Validate if the designated constraints aren't met.
type CSGatewayLoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSGatewayLoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSGatewayLoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSGatewayLoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSGatewayLoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSGatewayLoginValidationError) ErrorName() string { return "CSGatewayLoginValidationError" }

// Error satisfies the builtin error interface
func (e CSGatewayLoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSGatewayLogin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSGatewayLoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSGatewayLoginValidationError{}

// Validate checks the field values on SCGatewayLogin with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SCGatewayLogin) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrCode

	// no validation rules for Userid

	// no validation rules for Name

	// no validation rules for SceneId

	// no validation rules for ZoneId

	return nil
}

// SCGatewayLoginValidationError is the validation error returned by
// SCGatewayLogin.Validate if the designated constraints aren't met.
type SCGatewayLoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCGatewayLoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCGatewayLoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCGatewayLoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCGatewayLoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCGatewayLoginValidationError) ErrorName() string { return "SCGatewayLoginValidationError" }

// Error satisfies the builtin error interface
func (e SCGatewayLoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCGatewayLogin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCGatewayLoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCGatewayLoginValidationError{}

// Validate checks the field values on CSGatewayLogout with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CSGatewayLogout) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Token

	// no validation rules for PlatName

	return nil
}

// CSGatewayLogoutValidationError is the validation error returned by
// CSGatewayLogout.Validate if the designated constraints aren't met.
type CSGatewayLogoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSGatewayLogoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSGatewayLogoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSGatewayLogoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSGatewayLogoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSGatewayLogoutValidationError) ErrorName() string { return "CSGatewayLogoutValidationError" }

// Error satisfies the builtin error interface
func (e CSGatewayLogoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSGatewayLogout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSGatewayLogoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSGatewayLogoutValidationError{}

// Validate checks the field values on SCGatewayLogout with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SCGatewayLogout) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SCGatewayLogoutValidationError is the validation error returned by
// SCGatewayLogout.Validate if the designated constraints aren't met.
type SCGatewayLogoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCGatewayLogoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCGatewayLogoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCGatewayLogoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCGatewayLogoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCGatewayLogoutValidationError) ErrorName() string { return "SCGatewayLogoutValidationError" }

// Error satisfies the builtin error interface
func (e SCGatewayLogoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCGatewayLogout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCGatewayLogoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCGatewayLogoutValidationError{}

// Validate checks the field values on CSGatewayOnlineList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CSGatewayOnlineList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ZoneId

	return nil
}

// CSGatewayOnlineListValidationError is the validation error returned by
// CSGatewayOnlineList.Validate if the designated constraints aren't met.
type CSGatewayOnlineListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSGatewayOnlineListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSGatewayOnlineListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSGatewayOnlineListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSGatewayOnlineListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSGatewayOnlineListValidationError) ErrorName() string {
	return "CSGatewayOnlineListValidationError"
}

// Error satisfies the builtin error interface
func (e CSGatewayOnlineListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSGatewayOnlineList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSGatewayOnlineListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSGatewayOnlineListValidationError{}

// Validate checks the field values on OnlineList with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OnlineList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sid

	// no validation rules for Addr

	// no validation rules for Name

	// no validation rules for Players

	// no validation rules for ProId

	// no validation rules for Max

	// no validation rules for ZoneId

	return nil
}

// OnlineListValidationError is the validation error returned by
// OnlineList.Validate if the designated constraints aren't met.
type OnlineListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineListValidationError) ErrorName() string { return "OnlineListValidationError" }

// Error satisfies the builtin error interface
func (e OnlineListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineListValidationError{}

// Validate checks the field values on SCGatewayOnlineList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SCGatewayOnlineList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SCGatewayOnlineListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SCGatewayOnlineListValidationError is the validation error returned by
// SCGatewayOnlineList.Validate if the designated constraints aren't met.
type SCGatewayOnlineListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCGatewayOnlineListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCGatewayOnlineListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCGatewayOnlineListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCGatewayOnlineListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCGatewayOnlineListValidationError) ErrorName() string {
	return "SCGatewayOnlineListValidationError"
}

// Error satisfies the builtin error interface
func (e SCGatewayOnlineListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCGatewayOnlineList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCGatewayOnlineListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCGatewayOnlineListValidationError{}

// Validate checks the field values on CSGatewayJoinOnline with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CSGatewayJoinOnline) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sid

	// no validation rules for Quick

	// no validation rules for ZoneId

	// no validation rules for Version

	return nil
}

// CSGatewayJoinOnlineValidationError is the validation error returned by
// CSGatewayJoinOnline.Validate if the designated constraints aren't met.
type CSGatewayJoinOnlineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSGatewayJoinOnlineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSGatewayJoinOnlineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSGatewayJoinOnlineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSGatewayJoinOnlineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSGatewayJoinOnlineValidationError) ErrorName() string {
	return "CSGatewayJoinOnlineValidationError"
}

// Error satisfies the builtin error interface
func (e CSGatewayJoinOnlineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSGatewayJoinOnline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSGatewayJoinOnlineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSGatewayJoinOnlineValidationError{}

// Validate checks the field values on SCGatewayJoinOnline with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SCGatewayJoinOnline) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Userid

	// no validation rules for Account

	// no validation rules for Nick

	// no validation rules for Gold

	// no validation rules for SceneId

	// no validation rules for IsNew

	// no validation rules for Frame

	// no validation rules for Head

	// no validation rules for Model

	// no validation rules for Sex

	// no validation rules for Level

	// no validation rules for Exp

	// no validation rules for RegTime

	// no validation rules for ServerTime

	// no validation rules for TodayFirstLogin

	// no validation rules for ProcIndex

	// no validation rules for ErrCode

	return nil
}

// SCGatewayJoinOnlineValidationError is the validation error returned by
// SCGatewayJoinOnline.Validate if the designated constraints aren't met.
type SCGatewayJoinOnlineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCGatewayJoinOnlineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCGatewayJoinOnlineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCGatewayJoinOnlineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCGatewayJoinOnlineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCGatewayJoinOnlineValidationError) ErrorName() string {
	return "SCGatewayJoinOnlineValidationError"
}

// Error satisfies the builtin error interface
func (e SCGatewayJoinOnlineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCGatewayJoinOnline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCGatewayJoinOnlineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCGatewayJoinOnlineValidationError{}

// Validate checks the field values on SCRewardBoxNotify with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SCRewardBoxNotify) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RewardType

	// no validation rules for RewardList

	// no validation rules for Source

	return nil
}

// SCRewardBoxNotifyValidationError is the validation error returned by
// SCRewardBoxNotify.Validate if the designated constraints aren't met.
type SCRewardBoxNotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCRewardBoxNotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCRewardBoxNotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCRewardBoxNotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCRewardBoxNotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCRewardBoxNotifyValidationError) ErrorName() string {
	return "SCRewardBoxNotifyValidationError"
}

// Error satisfies the builtin error interface
func (e SCRewardBoxNotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCRewardBoxNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCRewardBoxNotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCRewardBoxNotifyValidationError{}

// Validate checks the field values on CSReconnection with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CSReconnection) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Userid

	// no validation rules for Token

	// no validation rules for PlatName

	// no validation rules for ZoneId

	// no validation rules for Version

	return nil
}

// CSReconnectionValidationError is the validation error returned by
// CSReconnection.Validate if the designated constraints aren't met.
type CSReconnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSReconnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSReconnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSReconnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSReconnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSReconnectionValidationError) ErrorName() string { return "CSReconnectionValidationError" }

// Error satisfies the builtin error interface
func (e CSReconnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSReconnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSReconnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSReconnectionValidationError{}

// Validate checks the field values on SCReconnection with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SCReconnection) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ret

	return nil
}

// SCReconnectionValidationError is the validation error returned by
// SCReconnection.Validate if the designated constraints aren't met.
type SCReconnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCReconnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCReconnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCReconnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCReconnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCReconnectionValidationError) ErrorName() string { return "SCReconnectionValidationError" }

// Error satisfies the builtin error interface
func (e SCReconnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCReconnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCReconnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCReconnectionValidationError{}
