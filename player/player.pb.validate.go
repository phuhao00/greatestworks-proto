// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: player.proto

package player

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CSCreateUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CSCreateUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserName

	// no validation rules for Password

	return nil
}

// CSCreateUserValidationError is the validation error returned by
// CSCreateUser.Validate if the designated constraints aren't met.
type CSCreateUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSCreateUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSCreateUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSCreateUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSCreateUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSCreateUserValidationError) ErrorName() string { return "CSCreateUserValidationError" }

// Error satisfies the builtin error interface
func (e CSCreateUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSCreateUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSCreateUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSCreateUserValidationError{}

// Validate checks the field values on SCCreateUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SCCreateUser) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SCCreateUserValidationError is the validation error returned by
// SCCreateUser.Validate if the designated constraints aren't met.
type SCCreateUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCCreateUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCCreateUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCCreateUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCCreateUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCCreateUserValidationError) ErrorName() string { return "SCCreateUserValidationError" }

// Error satisfies the builtin error interface
func (e SCCreateUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCCreateUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCCreateUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCCreateUserValidationError{}

// Validate checks the field values on CSLogin with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CSLogin) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserName

	// no validation rules for Password

	return nil
}

// CSLoginValidationError is the validation error returned by CSLogin.Validate
// if the designated constraints aren't met.
type CSLoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSLoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSLoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSLoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSLoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSLoginValidationError) ErrorName() string { return "CSLoginValidationError" }

// Error satisfies the builtin error interface
func (e CSLoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSLogin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSLoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSLoginValidationError{}

// Validate checks the field values on SCLogin with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SCLogin) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ok

	return nil
}

// SCLoginValidationError is the validation error returned by SCLogin.Validate
// if the designated constraints aren't met.
type SCLoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCLoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCLoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCLoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCLoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCLoginValidationError) ErrorName() string { return "SCLoginValidationError" }

// Error satisfies the builtin error interface
func (e SCLoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCLogin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCLoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCLoginValidationError{}

// Validate checks the field values on CSAddFriend with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CSAddFriend) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UId

	return nil
}

// CSAddFriendValidationError is the validation error returned by
// CSAddFriend.Validate if the designated constraints aren't met.
type CSAddFriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSAddFriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSAddFriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSAddFriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSAddFriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSAddFriendValidationError) ErrorName() string { return "CSAddFriendValidationError" }

// Error satisfies the builtin error interface
func (e CSAddFriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSAddFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSAddFriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSAddFriendValidationError{}

// Validate checks the field values on SCAddFriend with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SCAddFriend) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Desc

	return nil
}

// SCAddFriendValidationError is the validation error returned by
// SCAddFriend.Validate if the designated constraints aren't met.
type SCAddFriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCAddFriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCAddFriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCAddFriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCAddFriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCAddFriendValidationError) ErrorName() string { return "SCAddFriendValidationError" }

// Error satisfies the builtin error interface
func (e SCAddFriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCAddFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCAddFriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCAddFriendValidationError{}

// Validate checks the field values on CSDelFriend with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CSDelFriend) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UId

	return nil
}

// CSDelFriendValidationError is the validation error returned by
// CSDelFriend.Validate if the designated constraints aren't met.
type CSDelFriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSDelFriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSDelFriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSDelFriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSDelFriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSDelFriendValidationError) ErrorName() string { return "CSDelFriendValidationError" }

// Error satisfies the builtin error interface
func (e CSDelFriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSDelFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSDelFriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSDelFriendValidationError{}

// Validate checks the field values on SCDelFriend with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SCDelFriend) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Desc

	return nil
}

// SCDelFriendValidationError is the validation error returned by
// SCDelFriend.Validate if the designated constraints aren't met.
type SCDelFriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCDelFriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCDelFriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCDelFriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCDelFriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCDelFriendValidationError) ErrorName() string { return "SCDelFriendValidationError" }

// Error satisfies the builtin error interface
func (e SCDelFriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCDelFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCDelFriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCDelFriendValidationError{}

// Validate checks the field values on CSSendChatMsg with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CSSendChatMsg) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UId

	if v, ok := interface{}(m.GetMsg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CSSendChatMsgValidationError{
				field:  "Msg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Category

	return nil
}

// CSSendChatMsgValidationError is the validation error returned by
// CSSendChatMsg.Validate if the designated constraints aren't met.
type CSSendChatMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSSendChatMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSSendChatMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSSendChatMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSSendChatMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSSendChatMsgValidationError) ErrorName() string { return "CSSendChatMsgValidationError" }

// Error satisfies the builtin error interface
func (e CSSendChatMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSSendChatMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSSendChatMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSSendChatMsgValidationError{}

// Validate checks the field values on SCSendChatMsg with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SCSendChatMsg) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SCSendChatMsgValidationError is the validation error returned by
// SCSendChatMsg.Validate if the designated constraints aren't met.
type SCSendChatMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCSendChatMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCSendChatMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCSendChatMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCSendChatMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCSendChatMsgValidationError) ErrorName() string { return "SCSendChatMsgValidationError" }

// Error satisfies the builtin error interface
func (e SCSendChatMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCSendChatMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCSendChatMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCSendChatMsgValidationError{}

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChatMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Content

	return nil
}

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}

// Validate checks the field values on Test with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Test) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestValidationError{
				field:  "T",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TestValidationError is the validation error returned by Test.Validate if the
// designated constraints aren't met.
type TestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestValidationError) ErrorName() string { return "TestValidationError" }

// Error satisfies the builtin error interface
func (e TestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestValidationError{}

// Validate checks the field values on PlayerMsgData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PlayerMsgData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PlayerID

	// no validation rules for ServerID

	// no validation rules for Data

	return nil
}

// PlayerMsgDataValidationError is the validation error returned by
// PlayerMsgData.Validate if the designated constraints aren't met.
type PlayerMsgDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerMsgDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerMsgDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerMsgDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerMsgDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerMsgDataValidationError) ErrorName() string { return "PlayerMsgDataValidationError" }

// Error satisfies the builtin error interface
func (e PlayerMsgDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerMsgData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerMsgDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerMsgDataValidationError{}

// Validate checks the field values on PlayerSyncData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PlayerSyncData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// PlayerSyncDataValidationError is the validation error returned by
// PlayerSyncData.Validate if the designated constraints aren't met.
type PlayerSyncDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerSyncDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerSyncDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerSyncDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerSyncDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerSyncDataValidationError) ErrorName() string { return "PlayerSyncDataValidationError" }

// Error satisfies the builtin error interface
func (e PlayerSyncDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerSyncData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerSyncDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerSyncDataValidationError{}
