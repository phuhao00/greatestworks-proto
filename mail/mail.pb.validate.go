// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mail.proto

package mail

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on MailInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MailInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MUuid

	// no validation rules for MailId

	// no validation rules for Sender

	// no validation rules for MType

	// no validation rules for Status

	// no validation rules for SenderNickName

	// no validation rules for Content

	for idx, item := range m.GetGoods() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MailInfoValidationError{
					field:  fmt.Sprintf("Goods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Mtime

	// no validation rules for Template

	// no validation rules for Topic

	// no validation rules for SenderHead

	// no validation rules for Headline

	// no validation rules for Version

	// no validation rules for Url

	return nil
}

// MailInfoValidationError is the validation error returned by
// MailInfo.Validate if the designated constraints aren't met.
type MailInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailInfoValidationError) ErrorName() string { return "MailInfoValidationError" }

// Error satisfies the builtin error interface
func (e MailInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailInfoValidationError{}

// Validate checks the field values on GoodsInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GoodsInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ItemId

	// no validation rules for Num

	// no validation rules for Expire

	return nil
}

// GoodsInfoValidationError is the validation error returned by
// GoodsInfo.Validate if the designated constraints aren't met.
type GoodsInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoodsInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoodsInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoodsInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoodsInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoodsInfoValidationError) ErrorName() string { return "GoodsInfoValidationError" }

// Error satisfies the builtin error interface
func (e GoodsInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoodsInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoodsInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoodsInfoValidationError{}

// Validate checks the field values on Letter with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Letter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uuid

	// no validation rules for Msg

	// no validation rules for Nick

	// no validation rules for Tm

	// no validation rules for Response

	// no validation rules for ResponseTm

	// no validation rules for SenderId

	// no validation rules for IsRead

	// no validation rules for IsAddFriend

	// no validation rules for DealFriendState

	return nil
}

// LetterValidationError is the validation error returned by Letter.Validate if
// the designated constraints aren't met.
type LetterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LetterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LetterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LetterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LetterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LetterValidationError) ErrorName() string { return "LetterValidationError" }

// Error satisfies the builtin error interface
func (e LetterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLetter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LetterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LetterValidationError{}
