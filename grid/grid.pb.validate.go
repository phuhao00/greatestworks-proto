// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: grid.proto

package grid

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PVector3 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PVector3) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	return nil
}

// PVector3ValidationError is the validation error returned by
// PVector3.Validate if the designated constraints aren't met.
type PVector3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PVector3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PVector3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PVector3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PVector3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PVector3ValidationError) ErrorName() string { return "PVector3ValidationError" }

// Error satisfies the builtin error interface
func (e PVector3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPVector3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PVector3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PVector3ValidationError{}

// Validate checks the field values on PVector2Int with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PVector2Int) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	return nil
}

// PVector2IntValidationError is the validation error returned by
// PVector2Int.Validate if the designated constraints aren't met.
type PVector2IntValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PVector2IntValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PVector2IntValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PVector2IntValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PVector2IntValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PVector2IntValidationError) ErrorName() string { return "PVector2IntValidationError" }

// Error satisfies the builtin error interface
func (e PVector2IntValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPVector2Int.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PVector2IntValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PVector2IntValidationError{}

// Validate checks the field values on PRectInt with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PRectInt) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PRectIntValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PRectIntValidationError{
				field:  "Size",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PRectIntValidationError is the validation error returned by
// PRectInt.Validate if the designated constraints aren't met.
type PRectIntValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PRectIntValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PRectIntValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PRectIntValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PRectIntValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PRectIntValidationError) ErrorName() string { return "PRectIntValidationError" }

// Error satisfies the builtin error interface
func (e PRectIntValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPRectInt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PRectIntValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PRectIntValidationError{}

// Validate checks the field values on PGridFloorRect with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PGridFloorRect) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsShow

	// no validation rules for Name

	// no validation rules for Index

	// no validation rules for Type

	// no validation rules for Dir

	// no validation rules for UnlockLv

	if v, ok := interface{}(m.GetRect()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PGridFloorRectValidationError{
				field:  "Rect",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PGridFloorRectValidationError is the validation error returned by
// PGridFloorRect.Validate if the designated constraints aren't met.
type PGridFloorRectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PGridFloorRectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PGridFloorRectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PGridFloorRectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PGridFloorRectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PGridFloorRectValidationError) ErrorName() string { return "PGridFloorRectValidationError" }

// Error satisfies the builtin error interface
func (e PGridFloorRectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPGridFloorRect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PGridFloorRectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PGridFloorRectValidationError{}
